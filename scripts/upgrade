#!/bin/bash

#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source ynh_add_swap
source /usr/share/yunohost/helpers

config="$install_dir/live/.env.production"

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression "Ensuring downward compatibility..."

# Set `service` settings to support `yunohost app shell` command
if [[ -z "${service:-}" ]]; then
	service="$app-web.service"
	ynh_app_setting_set --key=service --value="$service"
fi

#Remove previous added repository
ynh_remove_extra_repo

if ynh_app_upgrading_from_version_before 2024.05.01~ynh1; then
	active_record_encryption_primary_key=$(ynh_string_random --length=32)
	ynh_app_setting_set --key=active_record_encryption_primary_key --value="$active_record_encryption_primary_key"

	active_record_encryption_deterministic_key=$(ynh_string_random --length=32)
	ynh_app_setting_set --key=active_record_encryption_deterministic_key --value="$active_record_encryption_deterministic_key"

	active_record_encryption_key_derivation_salt=$(ynh_string_random --length=32)
	ynh_app_setting_set --key=active_record_encryption_key_derivation_salt --value="$active_record_encryption_key_derivation_salt"
fi

#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression "Stopping $app's systemd service..."

ynh_systemctl --service="${app}-web" --action="stop" --log_path="/var/log/$app/$app-web.log"
ynh_systemctl --service="${app}-sidekiq" --action="stop" --log_path="/var/log/$app/$app-sidekiq.log"
ynh_systemctl --service="${app}-streaming" --action="stop" --log_path="/var/log/$app/$app-streaming.log"

# Rename the database to match packaging v2 defaults db_name (`$app_production` to `$app`)
if [[ $db_name = *'_production' ]]; then
	ynh_psql_db_shell <<< "ALTER DATABASE $db_name RENAME TO $app;"
	db_name=$app
	ynh_app_setting_set --key=db_name --value=$db_name
fi

#=================================================
# ADD SWAP IF NEEDED
#=================================================
ynh_script_progression "Adding swap if needed..."

total_memory=$(ynh_get_ram --total)
swap_needed=0

if [ $total_memory -lt $memory_needed ]; then
	# Need a minimum of 8Go of memory
	swap_needed=$(($memory_needed - $total_memory))
fi

ynh_script_progression "Adding $swap_needed Mo to swap..."
ynh_add_swap --size=$swap_needed

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression "Upgrading source files..."

# Download Mastodon
ynh_setup_source --dest_dir="$install_dir/live" --full_replace --keep="public/system/"
# Download redis migration script
ynh_setup_source --source_id=redis_migration --dest_dir="$install_dir/live"

chmod -R o-rwx "$install_dir"
chown -R "$app:www-data" "$install_dir"

#=================================================
# UPDATE A CONFIG FILE
#=================================================
ynh_script_progression "Updating a config file..."

language="$(echo $language | head -c 2)"

ynh_config_add --template=".env.production.sample" --destination="$config"

#=================================================
# BUILD ASSETS
#=================================================
ynh_script_progression "Building assets..."

pushd "$install_dir/live"

	gem update --system
	gem install bundler --no-document
	ynh_exec_as_app LD_PRELOAD=libjemalloc.so bin/bundle config deployment 'true'
	ynh_exec_as_app LD_PRELOAD=libjemalloc.so bin/bundle config without 'development test'
	ynh_exec_as_app LD_PRELOAD=libjemalloc.so bin/bundle config set force_ruby_platform true --quiet
	ynh_exec_as_app LD_PRELOAD=libjemalloc.so bin/bundle install -j$(getconf _NPROCESSORS_ONLN)

	# This export might be removed in yunohost 12

	corepack enable
	yarn install
	if [ -d "$install_dir/live/public/assets" ]; then
		ynh_hide_warnings ynh_exec_as_app RAILS_ENV=production  LD_PRELOAD=libjemalloc.so bin/bundle exec rails assets:clean
	fi
	ynh_hide_warnings ynh_exec_as_app RAILS_ENV=production  LD_PRELOAD=libjemalloc.so bin/bundle exec rails assets:precompile
	ynh_hide_warnings ynh_exec_as_app RAILS_ENV=production  LD_PRELOAD=libjemalloc.so bin/bundle exec rails db:migrate
	ynh_hide_warnings ynh_exec_as_app RAILS_ENV=production  LD_PRELOAD=libjemalloc.so bin/tootctl cache clear
popd

#=================================================
# APPLY MIGRATIONS
#=================================================
ynh_script_progression "Applying migrations..."

pushd "$install_dir/live"

	ynh_hide_warnings ynh_exec_as_app RAILS_ENV=production LD_PRELOAD=libjemalloc.so bin/bundle exec rails db:migrate
	ynh_hide_warnings ynh_exec_as_app RAILS_ENV=production LD_PRELOAD=libjemalloc.so bin/tootctl cache clear

	# Apply redis namespace migration (https://github.com/mastodon/redis_namespace_migration)
	ynh_hide_warnings ynh_exec_as_app RAILS_ENV=production LD_PRELOAD=libjemalloc.so bin/rails runner rename.rb
	redis_namespace="$(ynh_app_setting_get --key=redis_namespace)"
	if [ $redis_namespace ]; then
		if [ ynh_app_setting_get --key=es_enabled == "true" ] && [ ynh_app_setting_get --key=es_prefix == "" ]; then
			ynh_app_setting_set --key=es_prefix --value=$redis_namespace
		else
			ynh_app_setting_delete --key=redis_namespace
		fi
	fi
popd

#=================================================
# REAPPLY SYSTEM CONFIGURATIONS
#=================================================
ynh_script_progression "Upgrading system configurations related to $app..."

ynh_config_add_nginx

# Create a dedicated systemd config
ynh_config_add_systemd --service="$app-web" --template="glitchsoc-web.service"
yunohost service add "$app-web" --description="$app web service"

ynh_config_add_systemd --service="$app-sidekiq" --template="glitchsoc-sidekiq.service"
yunohost service add "$app-sidekiq" --description="$app sidekiq service"

ynh_config_add_systemd --service="$app-streaming" --template="glitchsoc-streaming.service"
yunohost service add "$app-streaming" --description="$app streaming service"

ynh_config_add --template="cron" --destination="/etc/cron.d/$app"

# Use logrotate to manage app-specific logfile(s)
ynh_config_add_logrotate

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression "Starting $app's systemd service..."

ynh_systemctl --service="${app}-web" --action="start" --log_path="/var/log/$app/$app-web.log" --wait_until="Listening on"
ynh_systemctl --service="${app}-sidekiq" --action="start" --log_path="/var/log/$app/$app-sidekiq.log" --wait_until="Schedules Loaded"
ynh_systemctl --service="${app}-streaming" --action="start" --log_path="/var/log/$app/$app-streaming.log" --wait_until="Streaming API now listening"

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression "Upgrade of $app completed"
